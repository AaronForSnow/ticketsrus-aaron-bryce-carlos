<h3>QRCode</h3>
@page "/"
@rendermode InteractiveServer
@using Microsoft.AspNetCore
@using System.Drawing;
@using QRCoder;
@using System.Drawing.Imaging;
@using BlazorTickets;
@inject ILogger<Home> log;

<PageTitle>QR Code Generator</PageTitle>

<div class="input-group">
    <div class="col-sm-6">
        <label class="mb-3">QR Code Text</label>
        <input type="text" @bind-value="QRCodeText" placeholder="Enter your text" class="form-control mb-4" />
        <button @onclick="GenerateQRCode" class="btn btn-success">Generate QR Code</button>
    </div>
</div>


<img alt="" src="@QRByte" width="300" class="mb-5" />

@code {
    public string QRCodeText { get; set; }

    public Home(string qRCodeText)
    {
        QRCodeText = qRCodeText;
    }

    public Home()
    {
        return;
    }

    public string QRByte = "place holder";

    protected override void OnInitialized()
    {
        log.LogInformation("This is a log");

        using var myActivity = bryceTrace.MyActivitySource1.StartActivity("Initialize");

        bryceMetrics.hitCount.Add(5);
    }

    public void GenerateQRCode()
    {
        bryceMetrics.hitCount.Add(5);

        using var myActivity = bryceTrace.MyActivitySource2.StartActivity("GenerateQrCode");

        if (!string.IsNullOrEmpty(QRCodeText))
        {
            using MemoryStream ms = new();
            QRCodeGenerator qrCodeGenerate = new();
            QRCodeData qrCodeData = qrCodeGenerate.CreateQrCode(QRCodeText, QRCodeGenerator.ECCLevel.Q);
            QRCode qrCode = new(qrCodeData);
            using Bitmap qrBitMap = qrCode.GetGraphic(20);
            qrBitMap.Save(ms, ImageFormat.Png);
            string base64 = Convert.ToBase64String(ms.ToArray());
            QRByte = string.Format("data:image/png;base64,{0}", base64);
        }

    }

}